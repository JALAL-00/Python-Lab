# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TQHGwe1LqFUvvJ1WAJF3ZbHu9AElVaSH
"""

from easyAI import TwoPlayerGame, Human_Player

class TicTacToe3D(TwoPlayerGame):
    """ The board positions are numbered as follows:
            7 8 9
            4 5 6
            1 2 3
    """

    def __init__(self, players):
        self.players = players
        self.board = [0 for _ in range(27)]
        self.current_player = 1  # player 1 starts.

    def possible_moves(self):
        return [i + 1 for i, e in enumerate(self.board) if e == 0]

    def make_move(self, move):
        self.board[int(move) - 1] = self.current_player

    def unmake_move(self, move):  # optional method (speeds up the AI)
        self.board[int(move) - 1] = 0

    def lose(self):
        """ Has the opponent "three in line ?" """
        # Check for a winner in the 3x3x3 grid
        return any(
            [
                all(
                    [
                        (self.board[c - 1] == self.opponent_index)
                        for c in line
                    ]
                )
                for line in [
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9],  # horiz.
                    [1, 4, 7],
                    [2, 5, 8],
                    [3, 6, 9],  # vertical
                    [1, 5, 9],
                    [3, 5, 7],  # diagonal
                    [10, 11, 12],
                    [13, 14, 15],
                    [16, 17, 18],  # horiz.
                    [10, 13, 16],
                    [11, 14, 17],
                    [12, 15, 18],  # vertical
                    [10, 14, 18],
                    [12, 14, 16],  # diagonal
                    [19, 20, 21],
                    [22, 23, 24],
                    [25, 26, 27],  # horiz.
                    [19, 22, 25],
                    [20, 23, 26],
                    [21, 24, 27],  # vertical
                    [19, 23, 27],
                    [21, 23, 25],  # diagonal
                    [1, 10, 19],
                    [2, 11, 20],
                    [3, 12, 21],  # horiz.
                    [4, 13, 22],
                    [5, 14, 23],
                    [6, 15, 24],  # vertical
                    [7, 16, 25],
                    [8, 17, 26],
                    [9, 18, 27],  # diagonal
                    [1, 11, 21],
                    [3, 11, 19],  # diagonal
                    [7, 17, 27],
                    [9, 17, 25],  # diagonal
                ]
            ]
        )

    def is_over(self):
        return (self.possible_moves() == []) or self.lose()

    def show(self):
        print("Board 1 (Positions 1-9):   Board 2 (Positions 10-18):   Board 3 (Positions 19-27):")
        for j in range(3):
            row_str = " ".join(["X", "O", "."][self.board[3 * j + i] - 1] for i in range(3))
            row_str += "   "  # Add space between boards
            row_str += " ".join(["X", "O", "."][self.board[3 * j + i + 9] - 1] for i in range(3))
            row_str += "   "  # Add space between boards
            row_str += " ".join(["X", "O", "."][self.board[3 * j + i + 18] - 1] for i in range(3))
            print(row_str)

    def scoring(self):
        return -100 if self.lose() else 0

    def play(self):
        while not self.is_over():
            self.show()
            move = int(input(f"Player {self.current_player}, enter your move: "))
            self.make_move(move)
            self.switch_player()

        self.show()
        winner = 3 - self.current_player  # Switch player to get the correct winner
        print(f"Player {winner} wins!")

if __name__ == "__main__":
    players = [Human_Player(), Human_Player()]

    game = TicTacToe3D(players)
    game.play()

